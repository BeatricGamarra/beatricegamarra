#include"TFT_eSPI.h"
#include <project_80586_inferencing.h>
#include <Multichannel_Gas_GMXXX.h>
#include <Wire.h>

TFT_eSPI tft;
GAS_GMXXX<TwoWire> gas;
ei_impulse_result_classification_t currentClassification[EI_CLASSIFIER_LABEL_COUNT];
const char* maxConfidenceLabel;

void runClassifier()
{
  float buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = { 0 };
  for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += 4) {
    uint64_t next_tick = micros() + (EI_CLASSIFIER_INTERVAL_MS * 1000);
    buffer[ix + 0] = gas.getGM102B();
    buffer[ix + 1] = gas.getGM302B();
    buffer[ix + 2] = gas.getGM502B();
    buffer[ix + 3] = gas.getGM702B();

    delayMicroseconds(next_tick - micros());
  }
  signal_t signal;
  int err = numpy:: signal_from_buffer(buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);
  ei_impulse_result_t result = { 0 };

  err = run_classifier(&signal, &result, false);
  float maxValue = 0;
  for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
    ei_impulse_result_classification_t classification_t = result.classification[ix];
    ei_printf("    %s: %.5f\n", classification_t.label, classification_t.value);
    float value = classification_t.value;
    if (value > maxValue) {
      maxValue = value;
      maxConfidenceLabel = classification_t.label;
    }
    currentClassification[ix] = classification_t;
  }
}

void setup(){
  tft.begin();
  gas.begin(Wire, 0x08);
  tft.setRotation(3);
  tft.fillScreen(0x0);
  tft.setTextColor(0x0);
  tft.setTextSize(3);

}



void loop(){

  runClassifier();
  if (maxConfidenceLabel == "cola") {
    tft.fillScreen(0x281F);
    tft.drawString((String)"OK DRIVE", 100, 100);
  }
  if (maxConfidenceLabel == "alcohol") {
    tft.fillScreen(0xF800);
    tft.drawString((String)"NO DRIVE", 100, 100);
  }
  if (maxConfidenceLabel == "caffe") {
    tft.fillScreen(0x4FE0);
    tft.drawString((String)"OK DRIVE", 100, 100);
  }

}
